version: '3'

volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
    image: img_converter_production_django
    platform: linux/x86_64
    depends_on:
      - postgres
      - redis
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    command: /start
    networks:
      - proxy-track
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy-track"
      - "traefik.http.routers.convert-secure.entrypoints=websecure"
      - "traefik.http.routers.convert-secure.rule=Host(`convert.africandao.com`)"
      - "traefik.http.routers.convert-secure.service=convert-service"
      - "traefik.http.services.convert-service.loadbalancer.server.port=5000"

  static:
    # nginx config
    image: nginx
    # volumes:
    #   - ./files:/usr/share/nginx/html:ro
    container_name: static-files
    restart: unless-stopped
    networks:
      - traefik
    labels:
      # Match on the hostname and the path
      - traefik.http.routers.static-files.rule=(Host(`convert.africandao.com`) && Path(`/static`))
      - traefik.http.routers.static-files.tls=true
      - traefik.http.routers.static-files.tls.certresolver=le
      - traefik.http.services.static-files.loadbalancer.server.port=80

      # Define a new middleware to strip the URL prefix before sending it to static-files
      - traefik.http.middlewares.static-files-stripprefix.stripprefix.prefixes=/static

      # tell Traefik which middlewares we want to use on this container
      - traefik.http.routers.static-files.middlewares=gzip@docker,static-files-stripprefix@docker

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: img_converter_production_postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data:Z
      - production_postgres_data_backups:/backups:z
    env_file:
      - ./.envs/.production/.postgres

  redis:
    image: redis:6

  celeryworker:
    <<: *django
    image: img_converter_production_celeryworker
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: img_converter_production_celerybeat
    command: /start-celerybeat

  flower:
    <<: *django
    image: img_converter_production_flower
    command: /start-flower

networks:
  proxy-track:
    external: true
  traefik:
